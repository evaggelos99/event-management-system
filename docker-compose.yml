services:
  db:
    image: postgres
    container_name: db
    hostname: db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: event-management-system
    ports:
      - "5433:5432"
    volumes:
      - ./scripts/docker-postgres/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - backend

  broker:
    image: apache/kafka
    hostname: broker
    container_name: broker
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://broker:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_CREATE_TOPICS: "ems.event.add-attendee:1:1,"
    ports:
      - "9092:9092"
    networks:
      - backend

  #  topic-creation:
  #    image: apache/kafka:latest
  #    command: >
  #      bash -c "
  #      /opt/kafka/bin/kafka-topics.sh --create --topic name1 --bootstrap-server broker:9092
  #      && /opt/kafka/bin/kafka-topics.sh --create --topic name2 --bootstrap-server broker:9092
  #      && /opt/kafka/bin/kafka-topics.sh --create --topic name3 --bootstrap-server broker:9092"
  #    depends_on:
  #      - broker

  attendee-service:
    container_name: attendee-service
    hostname: attendee-service
    image: 'evaggelosg99/attendee-service:latest'
    environment:
      org.com.ems.db.port: 5432
      org.com.ems.db.host: db
      server.port: 8080
      io.github.evaggelos99.ems.attendee.ticket-service-url: "http://ticket-service:8080/ticket"
      spring.kafka.producer.bootstrap-servers: broker:9092
      io.github.evaggelos99.ems.event.topic.add-attendee: ems.event.add-attendee
      spring.kafka.producer.retries: 3
    build:
      context: .
    ports:
      - "8081:8080"
    networks:
      - backend

  event-service:
    container_name: event-service
    hostname: event-service
    image: 'evaggelosg99/event-service:latest'
    environment:
      logging.level.io.github.evaggelos99.ems.event.service.transport.kafka: TRACE
      org.com.ems.db.port: 5432
      org.com.ems.db.host: db
      server.port: 8080
      spring.kafka.producer.bootstrap-servers: broker:9092
      spring.kafka.consumer.bootstrap-servers: broker:9092
      io.github.evaggelos99.ems.event.topic.add-attendee: ems.event.add-attendee
      spring.kafka.producer.retries: 3
    build:
      context: .
    ports:
      - "8082:8080"
      - "5005:5005"
    networks:
      - backend

  organizer-service:
    container_name: organizer-service
    hostname: organizer-service
    image: 'evaggelosg99/organizer-service:latest'
    environment:
      org.com.ems.db.port: 5432
      org.com.ems.db.host: db
      server.port: 8080
    build:
      context: .
    ports:
      - "8083:8080"
    networks:
      - backend

  ticket-service:
    container_name: ticket-service
    hostname: ticket-service
    image: 'evaggelosg99/ticket-service:latest'
    environment:
      org.com.ems.db.port: 5432
      org.com.ems.db.host: db
      server.port: 8080
    build:
      context: .
    ports:
      - "8084:8080"
    networks:
      - backend

  sponsor-service:
    container_name: sponsor-service
    hostname: sponsor-service
    image: 'evaggelosg99/sponsor-service:latest'
    environment:
      org.com.ems.db.port: 5432
      org.com.ems.db.host: db
      server.port: 8080
    build:
      context: .
    ports:
      - "8085:8080"
    networks:
      - backend



networks:
  backend:
    driver: bridge