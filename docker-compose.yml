services:
  db:
    image: postgres:16.8-alpine3.20
    container_name: db
    hostname: db
    environment:
      POSTGRES_USER: event-management-system-user
      POSTGRES_PASSWORD: event-management-system-user
      POSTGRES_DB: event-management-system
    ports:
      - "5433:5432"
    networks:
      - backend

  broker:
    image: apache/kafka
    hostname: broker
    container_name: broker
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://broker:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_CREATE_TOPICS: "ems.event.add-attendee:1:1,ems.event.remove-attendee:1:1,"
    ports:
      - "9092:9092"
    networks:
      - backend

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "broker:9092"
      JVM_OPTS: -Xms32M -Xmx64M
      SERVER_SERVLET_CONTEXTPATH: "/"
    depends_on:
      - broker
    networks:
      - backend

  #  topic-creation:
  #    image: apache/kafka:latest
  #    command: >
  #      bash -c "
  #      /opt/kafka/bin/kafka-topics.sh --create --topic name1 --bootstrap-server broker:9092
  #      && /opt/kafka/bin/kafka-topics.sh --create --topic name2 --bootstrap-server broker:9092
  #      && /opt/kafka/bin/kafka-topics.sh --create --topic name3 --bootstrap-server broker:9092"
  #    depends_on:
  #      - broker

  db-fusion:
    image: postgres:16.8-alpine3.20
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_USER}
    ports:
      - "6543:6543"
    command: -p 6543
    networks:
      - backend
    restart: unless-stopped
    volumes:
      - ./db_data:/var/lib/postgresql/data

  fusionauth:
    hostname: fusionauth
    image: fusionauth/fusionauth-app:1.55.1
    environment:
      DATABASE_URL: jdbc:postgresql://db-fusion:6543/fusionauth
      DATABASE_ROOT_USERNAME: ${POSTGRES_USER}
      DATABASE_ROOT_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_USERNAME: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      FUSIONAUTH_APP_MEMORY: ${FUSIONAUTH_APP_MEMORY}
      FUSIONAUTH_APP_RUNTIME_MODE: ${FUSIONAUTH_APP_RUNTIME_MODE}
      FUSIONAUTH_APP_URL: http://fusionauth:9011
    healthcheck:
      test: curl --silent --fail http://localhost:9011/api/status -o /dev/null -w "%{http_code}"
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend
    restart: unless-stopped
    depends_on:
      - db-fusion
    ports:
      - "9011:9011"
    volumes:
      - fusionauth_config:/usr/local/fusionauth/config

  fake-smtp:
    hostname: smtp-server
    image: reachfive/fake-smtp-server
    ports:
      - "1025:1025"
      - "1080:1080"
    networks:
      - backend

  attendee-service:
    container_name: attendee-service
    hostname: attendee-service
    image: 'evaggelosg99/attendee-service:latest'
    environment:
      org.com.ems.db.port: 5432
      io.github.evaggelos99.ems.attendee-service.db.host: db
      server.port: 8080
      io.github.evaggelos99.ems.attendee.ticket-service-url: "http://ticket-service:8080/ticket"
      io.github.evaggelos99.ems.attendee.user-service-url: "http://user-service:8080/user"
      spring.kafka.producer.bootstrap-servers: broker:9092
      io.github.evaggelos99.ems.event.topic.add-attendee: ems.event.add-attendee
      io.github.evaggelos99.ems.event.topic.remove-attendee: ems.event.remove-attendee
      spring.kafka.producer.retries: 3
      spring.security.oauth2.resourceserver.jwt.jwk-set-uri: ${JWK_SET_URI}
      spring.security.oauth2.resourceserver.jwt.issuer-uri: ${JWT_ISSUER_URI}
    depends_on:
      - db
      - broker
      - flyway
    ports:
      - "8081:8080"
    networks:
      - backend

  event-service:
    container_name: event-service
    hostname: event-service
    image: 'evaggelosg99/event-service:latest'
    environment:
      logging.level.io.github.evaggelos99.ems.event.service.transport.kafka: TRACE
      org.com.ems.db.port: 5432
      io.github.evaggelos99.ems.event-service.db.host: db
      server.port: 8080
      spring.kafka.producer.bootstrap-servers: broker:9092
      spring.kafka.consumer.bootstrap-servers: broker:9092
      io.github.evaggelos99.ems.event.topic.add-attendee: ems.event.add-attendee
      io.github.evaggelos99.ems.event.topic.remove-attendee: ems.event.remove-attendee
      spring.kafka.producer.retries: 3
      spring.security.oauth2.resourceserver.jwt.jwk-set-uri: ${JWK_SET_URI}
      spring.security.oauth2.resourceserver.jwt.issuer-uri: ${JWT_ISSUER_URI}
    depends_on:
      - db
      - broker
      - flyway
    ports:
      - "8082:8080"
    networks:
      - backend

  organizer-service:
    container_name: organizer-service
    hostname: organizer-service
    image: 'evaggelosg99/organizer-service:latest'
    environment:
      org.com.ems.db.port: 5432
      io.github.evaggelos99.ems.organizer-service.db.host: db
      server.port: 8080
      spring.security.oauth2.resourceserver.jwt.jwk-set-uri: ${JWK_SET_URI}
      spring.security.oauth2.resourceserver.jwt.issuer-uri: ${JWT_ISSUER_URI}
    depends_on:
      - db
      - broker
      - flyway
    ports:
      - "8083:8080"
    networks:
      - backend

  ticket-service:
    container_name: ticket-service
    hostname: ticket-service
    image: 'evaggelosg99/ticket-service:latest'
    environment:
      org.com.ems.db.port: 5432
      io.github.evaggelos99.ems.ticket-service.db.host: db
      server.port: 8080
      spring.security.oauth2.resourceserver.jwt.jwk-set-uri: ${JWK_SET_URI}
      spring.security.oauth2.resourceserver.jwt.issuer-uri: ${JWT_ISSUER_URI}
    depends_on:
      - db
      - broker
      - flyway
    ports:
      - "8080:8080"
    networks:
      - backend

  sponsor-service:
    container_name: sponsor-service
    hostname: sponsor-service
    image: 'evaggelosg99/sponsor-service:latest'
    environment:
      org.com.ems.db.port: 5432
      io.github.evaggelos99.ems.sponsor-service.db.host: db
      server.port: 8080
      spring.security.oauth2.resourceserver.jwt.jwk-set-uri: ${JWK_SET_URI}
      spring.security.oauth2.resourceserver.jwt.issuer-uri: ${JWT_ISSUER_URI}
    depends_on:
      - db
      - broker
      - flyway
    ports:
      - "8084:8080"
    networks:
      - backend

  user-service:
    container_name: user-service
    hostname: user-service
    image: 'evaggelosg99/user-service:latest'
    environment:
      org.com.ems.db.port: 5432
      io.github.evaggelos99.ems.user-service.db.host: db
      server.port: 8080
      spring.security.oauth2.resourceserver.jwt.jwk-set-uri: ${JWK_SET_URI}
      spring.security.oauth2.resourceserver.jwt.issuer-uri: ${JWT_ISSUER_URI}
    depends_on:
      - db
      - flyway
    ports:
      - "8086:8080"
    networks:
      - backend

  flyway:
    container_name: flyway
    hostname: flyway
    image: 'evaggelosg99/flyway:latest'
    restart: "no"
    environment:
      org.com.ems.db.port: 5432
      org.com.ems.db.host: db
      org.com.ems.db.user: event-management-system-user
      org.com.ems.db.password: event-management-system-user
      org.com.ems.db.database: event-management-system
    depends_on:
      - db
    ports:
      - "12345:8080"
    networks:
      - backend

  event-stream-simulator:
    container_name: event-stream-simulator
    hostname: event-stream-simulator
    image: 'evaggelosg99/event-stream-simulator:latest'
    restart: "no"
    environment:
      spring.kafka.producer.bootstrap-servers: "broker:9092"
      io.github.evaggelos99.ems.event.simulator.event-service-url: "http://event-service:8080/event"
      io.github.evaggelos99.ems.event.simulator.enabled: true
      io.github.evaggelos99.ems.event.simulator.fusionAuthClient: ${JWT_ISSUER_URI}
      io.github.evaggelos99.ems.event.simulator.clientSecret: ${JWT_SECRET}
      io.github.evaggelos99.ems.event.simulator.username: superduper
      io.github.evaggelos99.ems.event.simulator.password: superduper
      io.github.evaggelos99.ems.event.simulator.clientId: 99c404e4-2877-4296-9c85-a89191d19e21

    depends_on:
      - broker
      - fusionauth
    ports:
      - "8085:8080"
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  fusionauth_config: